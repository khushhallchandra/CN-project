'use strict'
// **Github:** https://github.com/fidm/quic
//
// **License:** MIT

import { suite, it } from 'tman'
import { ok, strictEqual, throws, equal } from 'assert'

import { bufferFromBytes } from './common'
import { BufferVisitor, toBuffer } from '../src/internal/common'
import {
  ConnectionID, PacketNumber, StreamID, SocketAddress, Offset, QuicTags, Tag,
} from '../src/internal/protocol'

suite('QUIC Protocol', function () {
  suite('ConnectionID', function () {
    it('ConnectionID.random, ConnectionID.fromString', function () {
      const connectionID = ConnectionID.random()
      strictEqual(connectionID.byteLen(), 8)
      strictEqual(connectionID.valueOf().length, 16)
      ok(connectionID.equals(new ConnectionID(connectionID.toString())))
      ok(connectionID.equals(ConnectionID.fromBuffer(new BufferVisitor(toBuffer(connectionID)))))
    })
  })

  suite('PacketNumber', function () {
    it('PacketNumber.fromBuffer', function () {
      throws(() => PacketNumber.fromBuffer(new BufferVisitor(bufferFromBytes([])), 0))
      let packetNumber = PacketNumber.fromBuffer(new BufferVisitor(bufferFromBytes([0x1])), 1)
      strictEqual(packetNumber.valueOf(), 1)
      ok(toBuffer(packetNumber).equals(bufferFromBytes([0x1])))

      packetNumber = PacketNumber.fromBuffer(new BufferVisitor(bufferFromBytes([0x0, 0x0, 0x1, 0x0])), 4)
      strictEqual(packetNumber.valueOf(), 0x100)
      ok(toBuffer(packetNumber).equals(bufferFromBytes([0x1, 0x0])))

      packetNumber = PacketNumber.fromBuffer(new BufferVisitor(bufferFromBytes([0x0, 0x1, 0x0, 0x0])), 4)
      strictEqual(packetNumber.valueOf(), 0x10000)
      ok(toBuffer(packetNumber).equals(bufferFromBytes([0x0, 0x1, 0x0, 0x0])))

      packetNumber = PacketNumber.fromBuffer(new BufferVisitor(bufferFromBytes([0x0, 0x0, 0x1, 0x0, 0x0, 0x0])), 6)
      strictEqual(packetNumber.valueOf(), 0x1000000)
      ok(toBuffer(packetNumber).equals(bufferFromBytes([0x1, 0x0, 0x0, 0x0])))

      packetNumber = PacketNumber.fromBuffer(new BufferVisitor(bufferFromBytes([
        0x0, 0x0, 0x0, 0x0,
        0x1, 0x0])), 6)
      strictEqual(packetNumber.valueOf(), 0x100)
      ok(toBuffer(packetNumber).equals(bufferFromBytes([0x1, 0x0])))

      throws(() => PacketNumber.fromBuffer(new BufferVisitor(bufferFromBytes([
        0x0, 0x1, 0x0, 0x0,
        0x0, 0x0, 0x0, 0x0])), 8))
    })

    it('new PacketNumber', function () {
      throws(() => new PacketNumber(0))

      let id = 1  // 8 bits
      let packetNumber = new PacketNumber(id)
      strictEqual(packetNumber.valueOf(), id)
      ok(toBuffer(packetNumber).equals(bufferFromBytes([0x1])))

      id = 0x100  // 16 bits
      packetNumber = new PacketNumber(id)
      strictEqual(packetNumber.valueOf(), id)
      ok(toBuffer(packetNumber).equals(bufferFromBytes([0x1, 0x0])))

      id = 0x10000 // 32 bits
      packetNumber = new PacketNumber(id)
      strictEqual(packetNumber.valueOf(), id)
      ok(toBuffer(packetNumber).equals(bufferFromBytes([0x0, 0x1, 0x0, 0x0])))

      id = 0x100000000 // 48 bits
      packetNumber = new PacketNumber(id)
      strictEqual(packetNumber.valueOf(), id)
      ok(toBuffer(packetNumber).equals(bufferFromBytes([0x0, 0x1, 0x0, 0x0, 0x0, 0x0])))

      id = 0x1000000000000 // > 48 bit
      throws(() => new PacketNumber(id))
    })

    it('packetNumber.equals', function () {
      ok(new PacketNumber(1).equals(PacketNumber.fromBuffer(new BufferVisitor(bufferFromBytes([0x1])), 1)))
      ok(new PacketNumber(0x10000)
        .equals(PacketNumber.fromBuffer(new BufferVisitor(bufferFromBytes([0x0, 0x0, 0x0, 0x1, 0x0, 0x0])), 6)))
      ok(!new PacketNumber(0x10000)
        .equals(PacketNumber.fromBuffer(new BufferVisitor(bufferFromBytes([0x0, 0x0, 0x1, 0x0, 0x0, 0x0])), 6)))
    })

    it('packetNumber.byteLen', function () {
      equal(new PacketNumber(1).byteLen(), 1)
      equal(new PacketNumber(1).byteLen(true), 6)
    })

    it('packetNumber.nextNumber', function () {
      let packetNumber = new PacketNumber(1)
      packetNumber = packetNumber.nextNumber()
      strictEqual(packetNumber.isLimitReached(), false)
      strictEqual(packetNumber.valueOf(), 2)
      strictEqual(packetNumber.nextNumber().valueOf(), 3)

      packetNumber = new PacketNumber(0xffffffffffff - 1)
      strictEqual(packetNumber.isLimitReached(), false)
      packetNumber = packetNumber.nextNumber()
      strictEqual(packetNumber.isLimitReached(), true)
      throws(() => packetNumber = packetNumber.nextNumber())
    })

    it('packetNumber.flagBits()', function () {
      let packetNumber = PacketNumber.fromBuffer(new BufferVisitor(bufferFromBytes([0x1])), 1)
      strictEqual(packetNumber.flagBits(), 0b00)

      packetNumber = PacketNumber.fromBuffer(new BufferVisitor(bufferFromBytes([0x1, 0x1])), 2)
      strictEqual(packetNumber.flagBits(), 0b01)

      packetNumber = PacketNumber.fromBuffer(new BufferVisitor(bufferFromBytes([0x1, 0x1, 0x1])), 3)
      strictEqual(packetNumber.flagBits(), 0b10)
      packetNumber = PacketNumber.fromBuffer(new BufferVisitor(bufferFromBytes([0x1, 0x1, 0x1, 0x1])), 4)
      strictEqual(packetNumber.flagBits(), 0b10)

      packetNumber = PacketNumber.fromBuffer(new BufferVisitor(bufferFromBytes([0x1, 0x1, 0x1, 0x1, 0x1])), 5)
      strictEqual(packetNumber.flagBits(), 0b11)
      packetNumber = PacketNumber.fromBuffer(new BufferVisitor(bufferFromBytes([0x1, 0x1, 0x1, 0x1, 0x1, 0x1])), 6)
      strictEqual(packetNumber.flagBits(), 0b11)
    })

    it('PacketNumber.flagToByteLen', function () {
      strictEqual(PacketNumber.flagToByteLen(0b00), 1)
      strictEqual(PacketNumber.flagToByteLen(0b01), 2)
      strictEqual(PacketNumber.flagToByteLen(0b10), 4)
      strictEqual(PacketNumber.flagToByteLen(0b11), 6)
    })
  })

  suite('StreamID', function () {
    it('StreamID.fromBuffer', function () {
      throws(() => StreamID.fromBuffer(new BufferVisitor(bufferFromBytes([])), 0))

      let streamID = StreamID.fromBuffer(new BufferVisitor(bufferFromBytes([0x0])), 1)
      strictEqual(streamID.valueOf(), 0)
      ok(toBuffer(streamID).equals(bufferFromBytes([0x0])))

      streamID = StreamID.fromBuffer(new BufferVisitor(bufferFromBytes([0x1])), 1)
      strictEqual(streamID.valueOf(), 1)
      ok(toBuffer(streamID).equals(bufferFromBytes([0x1])))

      streamID = StreamID.fromBuffer(new BufferVisitor(bufferFromBytes([0x0, 0x0, 0x1, 0x0])), 4)
      strictEqual(streamID.valueOf(), 0x100)
      ok(toBuffer(streamID).equals(bufferFromBytes([0x1, 0x0])))

      streamID = StreamID.fromBuffer(new BufferVisitor(bufferFromBytes([0x0, 0x1, 0x0, 0x0])), 4)
      strictEqual(streamID.valueOf(), 0x10000)
      ok(toBuffer(streamID).equals(bufferFromBytes([0x1, 0x0, 0x0])))

      streamID = StreamID.fromBuffer(new BufferVisitor(bufferFromBytes([0x0, 0x0, 0x0, 0x1, 0x0, 0x0])), 6)
      strictEqual(streamID.valueOf(), 0x10000)
      ok(toBuffer(streamID).equals(bufferFromBytes([0x1, 0x0, 0x0])))

      streamID = StreamID.fromBuffer(new BufferVisitor(bufferFromBytes([
        0x0, 0x0, 0x1, 0x0, 0x0, 0x0])), 6)
      strictEqual(streamID.valueOf(), 0x1000000)
      ok(toBuffer(streamID).equals(bufferFromBytes([0x1, 0x0, 0x0, 0x0])))

      throws(() => StreamID.fromBuffer(new BufferVisitor(bufferFromBytes([
        0x0, 0x0, 0x0, 0x1,
        0x0, 0x0, 0x0, 0x0])), 8))
    })

    it('new StreamID', function () {
      throws(() => new StreamID(-1))

      let id = 0  // 8 bits
      let streamID = new StreamID(id)
      strictEqual(streamID.valueOf(), id)
      ok(toBuffer(streamID).equals(bufferFromBytes([0x0])))

      id = 1  // 8 bits
      streamID = new StreamID(id)
      strictEqual(streamID.valueOf(), id)
      ok(toBuffer(streamID).equals(bufferFromBytes([0x1])))

      id = 0x100  // 16 bits
      streamID = new StreamID(id)
      strictEqual(streamID.valueOf(), id)
      ok(toBuffer(streamID).equals(bufferFromBytes([0x1, 0x0])))

      id = 0x10000 // 24 bits
      streamID = new StreamID(id)
      strictEqual(streamID.valueOf(), id)
      ok(toBuffer(streamID).equals(bufferFromBytes([0x1, 0x0, 0x0])))

      id = 0x1000000 // 32 bits
      streamID = new StreamID(id)
      strictEqual(streamID.valueOf(), id)
      ok(toBuffer(streamID).equals(bufferFromBytes([0x1, 0x0, 0x0, 0x0])))

      id = 0x100000000 // > 32 bit
      throws(() => new StreamID(id))
    })

    it('StreamID.equals', function () {
      ok(new StreamID(1).equals(StreamID.fromBuffer(new BufferVisitor(bufferFromBytes([0x1])), 1)))
      ok(new StreamID(0x10000)
        .equals(StreamID.fromBuffer(new BufferVisitor(bufferFromBytes([0x0, 0x0, 0x0, 0x1, 0x0, 0x0])), 6)))
      ok(!new StreamID(0x10000)
        .equals(StreamID.fromBuffer(new BufferVisitor(bufferFromBytes([0x0, 0x0, 0x1, 0x0, 0x0, 0x0])), 6)))
    })

    it('StreamID.byteLen', function () {
      equal(new StreamID(1).byteLen(), 1)
      equal(new StreamID(1).byteLen(true), 4)
    })

    it('StreamID.nextID', function () {
      let streamID1 = new StreamID(1)
      const streamID2 = new StreamID(2)
      streamID1 = streamID1.nextID()
      strictEqual(streamID1.valueOf(), 3)
      strictEqual(streamID1.nextID().valueOf(), 5)
      strictEqual(streamID2.nextID().valueOf(), 4)
      strictEqual(new StreamID(0xffffffff).nextID().valueOf(), 2)
      strictEqual(new StreamID(0xffffffff - 1).nextID().valueOf(), 1)
    })

    it('streamID.flagBits()', function () {
      let streamID = StreamID.fromBuffer(new BufferVisitor(bufferFromBytes([0x1])), 1)
      strictEqual(streamID.flagBits(), 0b00)

      streamID = StreamID.fromBuffer(new BufferVisitor(bufferFromBytes([0x1, 0x1])), 2)
      strictEqual(streamID.flagBits(), 0b01)

      streamID = StreamID.fromBuffer(new BufferVisitor(bufferFromBytes([0x1, 0x1, 0x1])), 3)
      strictEqual(streamID.flagBits(), 0b10)

      streamID = StreamID.fromBuffer(new BufferVisitor(bufferFromBytes([0x1, 0x1, 0x1, 0x1])), 4)
      strictEqual(streamID.flagBits(), 0b11)
    })

    it('StreamID.flagToByteLen', function () {
      strictEqual(StreamID.flagToByteLen(0b00), 1)
      strictEqual(StreamID.flagToByteLen(0b01), 2)
      strictEqual(StreamID.flagToByteLen(0b10), 3)
      strictEqual(StreamID.flagToByteLen(0b11), 4)
    })
  })

  suite('SocketAddress', function () {
    it('SocketAddress, IPv4', function () {
      let socketAddress = new SocketAddress(
        { port: 3000, family: 'IPv4', address: '127.0.0.1' })
      const res = SocketAddress.fromBuffer(new BufferVisitor(toBuffer(socketAddress)))
      ok(socketAddress.equals(res))

      socketAddress = new SocketAddress(
        { port: 0x1234, family: 'IPv4', address: '4.31.198.44' })
      ok(toBuffer(socketAddress).equals(bufferFromBytes([
        0x00, 0x02, 0x04, 0x1f, 0xc6, 0x2c, 0x12, 0x34])))
    })

    it('SocketAddress, IPv6', function () {
      let socketAddress = new SocketAddress(
        { port: 65534, family: 'IPv6', address: '::1' })
      const res = SocketAddress.fromBuffer(new BufferVisitor(toBuffer(socketAddress)))
      ok(socketAddress.equals(res))

      socketAddress = new SocketAddress({
        address: '2001:700:300:1800::', family: 'IPv6', port: 0x5678})
      ok(socketAddress.equals(SocketAddress.fromBuffer(new BufferVisitor(toBuffer(socketAddress)))))

      socketAddress = new SocketAddress({
        address: '2001:700:300:1800::f', family: 'IPv6', port: 0x5678})
      ok(toBuffer(socketAddress).equals(bufferFromBytes([
        0x00, 0x0a,
        0x20, 0x01, 0x07, 0x00, 0x03, 0x00, 0x18, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f,
        0x56, 0x78])))
    })
  })

  suite('Offset', function () {
    it('Offset.fromBuffer', function () {
      let offset = Offset.fromBuffer(new BufferVisitor(bufferFromBytes([])), 0)
      strictEqual(offset.valueOf(), 0)
      ok(toBuffer(offset).equals(bufferFromBytes([])))

      offset = Offset.fromBuffer(new BufferVisitor(bufferFromBytes([0x1])), 1)
      strictEqual(offset.valueOf(), 1)
      ok(toBuffer(offset).equals(bufferFromBytes([0x0, 0x1])))

      offset = Offset.fromBuffer(new BufferVisitor(bufferFromBytes([0x0, 0x0, 0x1, 0x0])), 4)
      strictEqual(offset.valueOf(), 0x100)
      ok(toBuffer(offset).equals(bufferFromBytes([0x1, 0x0])))

      offset = Offset.fromBuffer(new BufferVisitor(bufferFromBytes([0x0, 0x0, 0x0, 0x1, 0x0, 0x0])), 6)
      strictEqual(offset.valueOf(), 0x10000)
      ok(toBuffer(offset).equals(bufferFromBytes([0x1, 0x0, 0x0])))

      offset = Offset.fromBuffer(new BufferVisitor(bufferFromBytes([
        0x0, 0x0, 0x0, 0x1,
        0x0, 0x0, 0x0, 0x0])), 8)
      strictEqual(offset.valueOf(), 0x100000000)
      ok(toBuffer(offset).equals(bufferFromBytes([0x1, 0x0, 0x0, 0x0, 0x0])))

      offset = Offset.fromBuffer(new BufferVisitor(bufferFromBytes([
        0x0, 0x0, 0x1, 0x0,
        0x0, 0x0, 0x0, 0x0])), 8)
      strictEqual(offset.valueOf(), 0x010000000000)
      ok(toBuffer(offset).equals(bufferFromBytes([0x1, 0x0, 0x0, 0x0, 0x0, 0x0])))

      offset = Offset.fromBuffer(new BufferVisitor(bufferFromBytes([
        0x00, 0x1f, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff])), 8)
      strictEqual(offset.valueOf(), Number.MAX_SAFE_INTEGER)
      ok(toBuffer(offset).equals(bufferFromBytes([0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff])))

      throws(() => Offset.fromBuffer(new BufferVisitor(bufferFromBytes([
        0x1, 0x0, 0x0, 0x0,
        0x1, 0x0, 0x0, 0x0])), 8))
    })

    it('new Offset', function () {
      let value = 0  // 0 bits
      let offset = new Offset(value)
      strictEqual(offset.valueOf(), 0)
      ok(toBuffer(offset).equals(bufferFromBytes([])))

      value = 1  // 16 bits
      offset = new Offset(value)
      strictEqual(offset.valueOf(), value)
      ok(toBuffer(offset).equals(bufferFromBytes([0x0, 0x1])))

      value = 0x0100  // 16 bits
      offset = new Offset(value)
      strictEqual(offset.valueOf(), value)
      ok(toBuffer(offset).equals(bufferFromBytes([0x1, 0x0])))

      value = 0x010000 // 24 bits
      offset = new Offset(value)
      strictEqual(offset.valueOf(), value)
      ok(toBuffer(offset).equals(bufferFromBytes([0x1, 0x0, 0x0])))

      value = 0x01000000 // 32 bits
      offset = new Offset(value)
      strictEqual(offset.valueOf(), value)
      ok(toBuffer(offset).equals(bufferFromBytes([0x1, 0x0, 0x0, 0x0])))

      value = 0x0100000000 // 40 bits
      offset = new Offset(value)
      strictEqual(offset.valueOf(), value)
      ok(toBuffer(offset).equals(bufferFromBytes([0x1, 0x0, 0x0, 0x0, 0x0])))

      value = 0x010000000000 // 48 bits
      offset = new Offset(value)
      strictEqual(offset.valueOf(), value)
      ok(toBuffer(offset).equals(bufferFromBytes([0x1, 0x0, 0x0, 0x0, 0x0, 0x0])))

      value = Number.MAX_SAFE_INTEGER
      offset = new Offset(value)
      strictEqual(offset.valueOf(), value)
      strictEqual(offset.byteLen(), 7)
      Offset.fromBuffer(new BufferVisitor(toBuffer(offset)), offset.byteLen()).equals(offset)

      value = 0x100000000000000 // > MaxOffset
      throws(() => new Offset(value))
    })

    it('offset.byteLen', function () {
      equal(new Offset(1).byteLen(), 2)
      equal(new Offset(1).byteLen(true), 8)
      equal(new Offset(0).byteLen(true), 8)
    })

    it('offset.flagBits()', function () {
      let offset = Offset.fromBuffer(new BufferVisitor(bufferFromBytes([])), 0)
      strictEqual(offset.flagBits(), 0b000)

      offset = Offset.fromBuffer(new BufferVisitor(bufferFromBytes([0x1])), 1)
      strictEqual(offset.flagBits(), 0b001)

      offset = Offset.fromBuffer(new BufferVisitor(bufferFromBytes([0x1, 0x1])), 2)
      strictEqual(offset.flagBits(), 0b001)

      offset = Offset.fromBuffer(new BufferVisitor(bufferFromBytes([0x1, 0x1, 0x1])), 3)
      strictEqual(offset.flagBits(), 0b010)

      offset = Offset.fromBuffer(new BufferVisitor(bufferFromBytes([0x1, 0x1, 0x1, 0x1])), 4)
      strictEqual(offset.flagBits(), 0b011)

      offset = Offset.fromBuffer(new BufferVisitor(bufferFromBytes([0x1, 0x1, 0x1, 0x1, 0x1])), 5)
      strictEqual(offset.flagBits(), 0b100)

      offset = Offset.fromBuffer(new BufferVisitor(bufferFromBytes([0x1, 0x1, 0x1, 0x1, 0x1, 0x1])), 6)
      strictEqual(offset.flagBits(), 0b101)
    })

    it('Offset.flagToByteLen', function () {
      strictEqual(Offset.flagToByteLen(0b000), 0)
      strictEqual(Offset.flagToByteLen(0b001), 2)
      strictEqual(Offset.flagToByteLen(0b010), 3)
      strictEqual(Offset.flagToByteLen(0b011), 4)
      strictEqual(Offset.flagToByteLen(0b100), 5)
      strictEqual(Offset.flagToByteLen(0b101), 6)
      strictEqual(Offset.flagToByteLen(0b110), 7)
      strictEqual(Offset.flagToByteLen(0b111), 8)
    })
  })

  suite('QUIC Tag', function () {
    const data = bufferFromBytes([
      // message tag (kPRST)
      'PRST',
      // num_entries (2) + padding
      0x03, 0x00, 0x00, 0x00,
      'CADR',
      // end offset 8
      0x08, 0x00, 0x00, 0x00,
      // tag kRNON
      'RNON',
      // end offset 16
      0x10, 0x00, 0x00, 0x00,
      // tag kRSEQ
      'RSEQ',
      // end offset 24
      0x18, 0x00, 0x00, 0x00,
      // client address
      0x00, 0x02,
      0x04, 0x1F, 0xC6, 0x2C,
      0x01, 0xBB,
      // nonce proof
      0x89, 0x67, 0x45, 0x23,
      0x01, 0xEF, 0xCD, 0xAB,
      // rejected packet number
      0x00, 0x00, 0x78, 0x56,
      0x34, 0x12, 0xAA, 0x00,
    ])

    it('new QuicTags', function () {
      const quicTag = new QuicTags(Tag.PRST)
      quicTag.set(Tag.RNON, bufferFromBytes([
        0x89, 0x67, 0x45, 0x23,
        0x01, 0xEF, 0xCD, 0xAB]))

      quicTag.set(Tag.RSEQ, bufferFromBytes([
        0x00, 0x00, 0x78, 0x56,
        0x34, 0x12, 0xAA, 0x00]))

      quicTag.set(Tag.CADR, bufferFromBytes([
        0x00, 0x02,
        0x04, 0x1F, 0xC6, 0x2C,
        0x01, 0xBB]))

      const bufv = new BufferVisitor(Buffer.alloc(quicTag.byteLen()))
      quicTag.writeTo(bufv)
      ok(data.equals(bufv.buf))
    })

    it('QuicTags.fromBuffer', function () {
      const buf = data.slice()
      const quicTag = QuicTags.fromBuffer(new BufferVisitor(buf))
      strictEqual(quicTag.name, Tag.PRST)

      let tag = quicTag.get(Tag.RNON)
      ok(tag && tag.equals(bufferFromBytes([
        0x89, 0x67, 0x45, 0x23,
        0x01, 0xEF, 0xCD, 0xAB])))
      tag = quicTag.get(Tag.RSEQ)
      ok(tag && tag.equals(bufferFromBytes([
        0x00, 0x00, 0x78, 0x56,
        0x34, 0x12, 0xAA, 0x00])))
      tag = quicTag.get(Tag.CADR)
      ok(tag && tag.equals(bufferFromBytes([
        0x00, 0x02,
        0x04, 0x1F, 0xC6, 0x2C,
        0x01, 0xBB])))

      const bufv = new BufferVisitor(Buffer.alloc(8 + quicTag.byteLen()))
      bufv.walk(4)
      quicTag.writeTo(bufv)
      const empty4 = bufferFromBytes([0x0, 0x0, 0x0, 0x0])
      ok(empty4.equals(bufv.buf.slice(0, 4)))
      ok(empty4.equals(bufv.buf.slice(bufv.end)))
      bufv.reset(4, 4)

      const quicTag2 = QuicTags.fromBuffer(bufv)
      ok(quicTag.equals(quicTag2))
      ok(data.equals(toBuffer(quicTag2)))
    })

    it('handshake message from Chrome', function () {
      const buf = bufferFromBytes([
        0x43, 0x48, 0x4c, 0x4f, 0x12, 0x0, 0x0, 0x0, 0x50, 0x41, 0x44, 0x0, 0xe1, 0x3, 0x0, 0x0, 0x53, 0x4e, 0x49, 0x0,
        0xf1, 0x3, 0x0, 0x0, 0x56, 0x45, 0x52, 0x0, 0xf5, 0x3, 0x0, 0x0, 0x43, 0x43, 0x53, 0x0, 0x5, 0x4, 0x0, 0x0,
        0x4d, 0x53, 0x50, 0x43, 0x9, 0x4, 0x0, 0x0, 0x55, 0x41, 0x49, 0x44, 0x34, 0x4, 0x0, 0x0, 0x54, 0x43, 0x49, 0x44,
        0x38, 0x4, 0x0, 0x0, 0x50, 0x44, 0x4d, 0x44, 0x3c, 0x4, 0x0, 0x0, 0x53, 0x4d, 0x48, 0x4c, 0x40, 0x4, 0x0, 0x0,
        0x49, 0x43, 0x53, 0x4c, 0x44, 0x4, 0x0, 0x0, 0x43, 0x54, 0x49, 0x4d, 0x4c, 0x4, 0x0, 0x0, 0x4e, 0x4f, 0x4e,
        0x50, 0x6c, 0x4, 0x0, 0x0, 0x4d, 0x49, 0x44, 0x53, 0x70, 0x4, 0x0, 0x0, 0x53, 0x43, 0x4c, 0x53, 0x74, 0x4, 0x0,
        0x0, 0x43, 0x53, 0x43, 0x54, 0x74, 0x4, 0x0, 0x0, 0x43, 0x4f, 0x50, 0x54, 0x74, 0x4, 0x0, 0x0, 0x43, 0x46, 0x43,
        0x57, 0x78, 0x4, 0x0, 0x0, 0x53, 0x46, 0x43, 0x57, 0x7c, 0x4, 0x0, 0x0, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d,
        0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d,
        0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d,
        0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d,
        0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d,
        0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d,
        0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d,
        0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d,
        0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d,
        0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d,
        0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d,
        0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d,
        0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d,
        0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d,
        0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d,
        0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d,
        0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d,
        0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d,
        0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d,
        0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d,
        0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d,
        0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d,
        0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d,
        0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d,
        0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d,
        0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d,
        0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d,
        0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d,
        0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d,
        0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d,
        0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d,
        0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d,
        0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d,
        0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d,
        0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d,
        0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d,
        0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d,
        0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d,
        0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d,
        0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d,
        0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d,
        0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d,
        0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d,
        0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d,
        0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d,
        0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d,
        0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d,
        0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d,
        0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d,
        0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d,
        0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d,
        0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d,
        0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d,
        0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d,
        0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d,
        0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x71, 0x75, 0x69,
        0x63, 0x2e, 0x63, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x2e, 0x69, 0x6f, 0x51, 0x30, 0x33, 0x39, 0x1, 0xe8,
        0x81, 0x60, 0x92, 0x92, 0x1a, 0xe8, 0x7e, 0xed, 0x80, 0x86, 0xa2, 0x15, 0x82, 0x91, 0x64, 0x0, 0x0, 0x0, 0x43,
        0x68, 0x72, 0x6f, 0x6d, 0x65, 0x2f, 0x36, 0x36, 0x2e, 0x30, 0x2e, 0x33, 0x33, 0x35, 0x39, 0x2e, 0x31, 0x33,
        0x39, 0x20, 0x49, 0x6e, 0x74, 0x65, 0x6c, 0x20, 0x4d, 0x61, 0x63, 0x20, 0x4f, 0x53, 0x20, 0x58, 0x20, 0x31,
        0x30, 0x5f, 0x31, 0x33, 0x5f, 0x34, 0x0, 0x0, 0x0, 0x0, 0x58, 0x35, 0x30, 0x39, 0x1, 0x0, 0x0, 0x0, 0x1e, 0x0,
        0x0, 0x0, 0x6e, 0x69, 0xe8, 0x5a, 0x0, 0x0, 0x0, 0x0, 0x6d, 0x2, 0x1a, 0xcb, 0x7b, 0x67, 0x12, 0x66, 0x39, 0x24,
        0x1f, 0x6f, 0x6a, 0x9e, 0x28, 0xd8, 0x44, 0xdf, 0x75, 0xfd, 0xb2, 0xe4, 0xfd, 0xd, 0xd6, 0xc4, 0x55, 0x30, 0x1d,
        0x10, 0xe, 0xbf, 0x64, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf0, 0x0, 0x0, 0x0, 0x60, 0x0,
      ])

      // { name: 'CHLO',
      //   tags: {
      //     PAD: <Buffer 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d
      //          2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d ... >,
      //     SNI: <Buffer 71 75 69 63 2e 63 6c 65 6d 65 6e 74 65 2e 69 6f>,
      //     VER: <Buffer 51 30 33 39>,
      //     CCS: <Buffer 01 e8 81 60 92 92 1a e8 7e ed 80 86 a2 15 82 91>,
      //     MSPC: <Buffer 64 00 00 00>,
      //     UAID: <Buffer 43 68 72 6f 6d 65 2f 36 36 2e 30 2e 33 33 35 39 2e 31 33 39 20 49 6e 74 65 6c 20 4d 61 63
      //            20 4f 53 20 58 20 31 30 5f 31 33 5f 34>,
      //     TCID: <Buffer 00 00 00 00>,
      //     PDMD: <Buffer 58 35 30 39>,
      //     SMHL: <Buffer 01 00 00 00>,
      //     ICSL: <Buffer 1e 00 00 00>,
      //     CTIM: <Buffer 6e 69 e8 5a 00 00 00 00>,
      //     NONP: <Buffer 6d 02 1a cb 7b 67 12 66 39 24 1f 6f 6a 9e 28 d8 44 df 75 fd b2 e4 fd 0d d6 c4 55 30 1d
      //           10 0e bf>,
      //     MIDS: <Buffer 64 00 00 00>,
      //     SCLS: <Buffer 01 00 00 00>,
      //     CSCT: <Buffer >,
      //     COPT: <Buffer >,
      //     CFCW: <Buffer 00 00 f0 00>,
      //     SFCW: <Buffer 00 00 60 00> } }

      const quicTag = QuicTags.fromBuffer(new BufferVisitor(buf))
      strictEqual(quicTag.size, 18)
      strictEqual((quicTag.get(Tag.PAD) as Buffer).length, 993)
      strictEqual((quicTag.get(Tag.SNI) as Buffer).toString(), 'quic.clemente.io')
      strictEqual((quicTag.get(Tag.VER) as Buffer).toString(), 'Q039')
      strictEqual((quicTag.get(Tag.UAID) as Buffer).toString(), 'Chrome/66.0.3359.139 Intel Mac OS X 10_13_4')
      strictEqual((quicTag.get(Tag.COPT) as Buffer).toString(), '')
      strictEqual((quicTag.get(Tag.PDMD) as Buffer).toString(), 'X509')
      // ok(toBuffer(quicTag).equals(buf)) sort it?
    })
  })
})
